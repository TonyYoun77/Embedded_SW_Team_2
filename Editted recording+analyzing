import cv2
import datetime
import numpy as np
import time
from PIL import ImageFont, ImageDraw, Image
import sys
import signal
import os
import shutil
from ultralytics import YOLO

# --- 경로 설정 ---
SAVE_VIDEO_FOLDER = 'saved_videos' # 임시 저장 폴더
DANGER_FOLDER = 'danger_videos'
NORMAL_FOLDER = 'normal_videos'

# 폴더 생성 (이미 존재하면 건너뜀)
os.makedirs(SAVE_VIDEO_FOLDER, exist_ok=True)
os.makedirs(DANGER_FOLDER, exist_ok=True)
os.makedirs(NORMAL_FOLDER, exist_ok=True)

# --- 저장 공간 관리 설정 ---
MAX_STORAGE_GB = 30 # 최대 저장 공간 (기가바이트)
MAX_STORAGE_BYTES = MAX_STORAGE_GB * 1024 * 1024 * 1024 # 바이트 단위로 변환
CLEANUP_INTERVAL_SECONDS = 300 # 5분(300초)마다 저장 공간 확인 및 정리

# --- 녹화 설정 ---
is_record = False
record_start_time = 0
RECORD_DURATION = 15 # 녹화 지속 시간 (초)
video_writer = None
current_video_filename = None
is_danger_recorded_in_session = False # 현재 녹화 세션에서 위험이 감지되었는지 여부

# --- 위험 클래스 설정 ---
# 이 모델의 클래스 이름과 일치해야 합니다.
DANGER_CLASSES = ['fall', 'fight', 'fire', 'gas', 'weapons']

# --- YOLO 모델 로드 ---
try:
    model = YOLO('best.pt')
    print("[SYSTEM] YOLO 모델 로드 완료: best.pt")
except Exception as e:
    print(f"[ERROR] YOLO 모델 로드 실패: {e}")
    sys.exit(1)

# --- 녹화 파일명 생성 함수 ---
def generate_filename():
    """현재 날짜와 시간을 기반으로 AVI 파일명을 생성합니다."""
    now = datetime.datetime.now()
    return now.strftime("CCTV_%Y-%m-%d_%H-%M-%S.avi")

# --- 녹화 시작 ---
def start_recording(frame_shape, fourcc_codec):
    """
    비디오 녹화를 시작합니다.
    Args:
        frame_shape (tuple): 프레임의 (높이, 너비, 채널) 튜플.
        fourcc_codec (int): 비디오 코덱 (예: cv2.VideoWriter_fourcc(*'XVID')).
    """
    global video_writer, current_video_filename, is_danger_recorded_in_session
    filename = generate_filename()
    current_video_filename = os.path.join(SAVE_VIDEO_FOLDER, filename)
    
    # 비디오 라이터 초기화 (FPS는 30으로 유지)
    video_writer = cv2.VideoWriter(current_video_filename, fourcc_codec, 30, (frame_shape[1], frame_shape[0]))
    
    if not video_writer.isOpened():
        print(f"[ERROR] 비디오 라이터를 열 수 없습니다: {current_video_filename}")
        video_writer = None
        return False
        
    print(f"[REC] 녹화 시작: {filename}")
    is_danger_recorded_in_session = False # 새 녹화 세션 시작 시 위험 감지 플래그 초기화
    return True

# --- 녹화 종료 및 파일 분류 ---
def stop_recording():
    """
    비디오 녹화를 종료하고, 위험 감지 여부에 따라 파일을 분류합니다.
    """
    global video_writer, current_video_filename, is_danger_recorded_in_session
    if video_writer:
        print("[REC] 녹화 종료")
        video_writer.release()
        video_writer = None

        if current_video_filename and os.path.exists(current_video_filename):
            if is_danger_recorded_in_session:
                dst_folder = DANGER_FOLDER
                status_msg = "위험 감지됨"
            else:
                dst_folder = NORMAL_FOLDER
                status_msg = "이상 없음"
            
            dst_path = os.path.join(dst_folder, os.path.basename(current_video_filename))
            try:
                shutil.move(current_video_filename, dst_path)
                print(f"[ANALYZE] {status_msg} → {os.path.basename(current_video_filename)} (이동 완료)")
            except Exception as e:
                print(f"[ERROR] 파일 이동 실패 ({current_video_filename} -> {dst_path}): {e}")
        else:
            print("[WARNING] 종료할 비디오 파일이 없거나 찾을 수 없습니다.")
        current_video_filename = None # 파일 이동 후 초기화

# --- 위험 판단 함수 ---
def is_dangerous(results):
    """
    YOLO 모델의 결과에서 위험 클래스가 감지되었는지 확인합니다.
    Args:
        results (list): YOLO 모델 추론 결과 리스트.
    Returns:
        bool: 위험 클래스가 감지되면 True, 아니면 False.
    """
    for result in results:
        # result.boxes는 감지된 객체의 바운딩 박스 정보를 포함합니다.
        for box in result.boxes:
            class_id = int(box.cls[0]) # 클래스 ID
            class_name = model.names[class_id] # 클래스 이름
            if class_name in DANGER_CLASSES:
                return True
    return False

# --- 저장 공간 관리 함수들 ---
def get_all_video_files_sorted_by_oldest(folders):
    """
    주어진 폴더들에서 모든 .avi 파일을 찾아 오래된 순서대로 정렬하여 반환합니다.
    각 파일에 대해 (파일 경로, 수정 시간) 튜플을 포함합니다.
    """
    all_files = []
    for folder in folders:
        for root, _, files in os.walk(folder):
            for file in files:
                if file.endswith('.avi'):
                    file_path = os.path.join(root, file)
                    try:
                        # 파일 수정 시간을 기준으로 정렬 (가장 오래된 파일부터)
                        mod_time = os.path.getmtime(file_path)
                        all_files.append((file_path, mod_time))
                    except OSError as e:
                        print(f"[WARNING] 파일 정보 읽기 실패 ({file_path}): {e}")
    
    all_files.sort(key=lambda x: x[1]) # 수정 시간을 기준으로 오름차순 정렬 (오래된 순)
    return all_files

def get_total_storage_size(folders):
    """
    주어진 폴더들의 총 파일 크기를 계산하여 바이트 단위로 반환합니다.
    """
    total_size = 0
    for folder in folders:
        for root, _, files in os.walk(folder):
            for file in files:
                file_path = os.path.join(root, file)
                try:
                    total_size += os.path.getsize(file_path)
                except OSError as e:
                    print(f"[WARNING] 파일 크기 읽기 실패 ({file_path}): {e}")
    return total_size

def check_and_cleanup_storage():
    """
    저장 공간을 확인하고, 설정된 최대 크기를 초과하면 오래된 파일부터 삭제합니다.
    """
    global last_cleanup_time
    
    # 정리 주기 확인
    if time.time() - last_cleanup_time < CLEANUP_INTERVAL_SECONDS:
        return

    print("[CLEANUP] 저장 공간 정리 확인 중...")
    
    folders_to_check = [DANGER_FOLDER, NORMAL_FOLDER]
    current_total_size = get_total_storage_size(folders_to_check)
    
    print(f"[CLEANUP] 현재 총 저장 공간: {current_total_size / (1024 * 1024 * 1024):.2f} GB / {MAX_STORAGE_GB} GB")

    if current_total_size > MAX_STORAGE_BYTES:
        print(f"[CLEANUP] 총 저장 공간이 {MAX_STORAGE_GB} GB를 초과했습니다. 오래된 파일 삭제 시작.")
        
        all_video_files = get_all_video_files_sorted_by_oldest(folders_to_check)
        
        deleted_count = 0
        deleted_size = 0
        
        # 목표 크기: MAX_STORAGE_BYTES의 90% 정도로 설정하여 다시 초과하는 것을 방지
        target_size = MAX_STORAGE_BYTES * 0.9 # 예를 들어, 30GB면 27GB까지 줄임

        for file_path, _ in all_video_files:
            if current_total_size <= target_size:
                break # 목표 크기 이하로 줄었으면 중단
            
            try:
                file_size = os.path.getsize(file_path)
                os.remove(file_path)
                current_total_size -= file_size
                deleted_count += 1
                deleted_size += file_size
                print(f"[CLEANUP] 삭제됨: {os.path.basename(file_path)} (크기: {file_size / (1024 * 1024):.2f} MB)")
            except OSError as e:
                print(f"[ERROR] 파일 삭제 실패 ({file_path}): {e}")
        
        print(f"[CLEANUP] 총 {deleted_count}개의 파일 삭제됨. {deleted_size / (1024 * 1024 * 1024):.2f} GB 정리됨.")
        print(f"[CLEANUP] 정리 후 총 저장 공간: {current_total_size / (1024 * 1024 * 1024):.2f} GB")
    else:
        print("[CLEANUP] 저장 공간 양호.")
    
    last_cleanup_time = time.time() # 정리 시간 업데이트

# --- 종료 핸들러 ---
def signal_handler(sig, frame):
    """
    Ctrl+C (SIGINT) 신호 발생 시 호출되는 핸들러.
    모든 리소스를 해제하고 프로그램을 종료합니다.
    """
    print("\n[SYSTEM] 종료 신호 감지. 시스템 종료 중...")
    stop_recording() # 현재 녹화 중인 비디오가 있다면 종료 및 분류
    if 'capture' in globals() and capture.isOpened():
        capture.release()
    cv2.destroyAllWindows()
    sys.exit(0)

# SIGINT (Ctrl+C) 신호에 대한 핸들러 설정
signal.signal(signal.SIGINT, signal_handler)

# --- 카메라 초기화 ---
capture = cv2.VideoCapture(0) # 0번 카메라 (기본 웹캠)
if not capture.isOpened():
    print("[ERROR] 카메라를 열 수 없습니다. 카메라가 연결되어 있는지 확인해주세요.")
    sys.exit(1)

# 카메라 해상도 설정
capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

# 비디오 코덱 설정 (XVID는 일반적이고 호환성이 좋음)
fourcc = cv2.VideoWriter_fourcc(*'XVID')

# 폰트 로드 (라즈베리파이 환경에 맞게 경로 조정 필요)
try:
    font = ImageFont.truetype('fonts/SCDream6.otf', 20)
except IOError:
    print("[WARNING] 폰트 파일 'fonts/SCDream6.otf'를 찾을 수 없습니다. 기본 폰트를 사용합니다.")
    font = ImageFont.load_default()

# 첫 프레임 읽기 및 전처리 (모션 감지 초기화용)
ret, frame1 = capture.read()
if not ret:
    print("[ERROR] 카메라에서 첫 프레임을 읽을 수 없습니다.")
    sys.exit(1)

frame1_gray = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
frame1_gray = cv2.GaussianBlur(frame1_gray, (21, 21), 0)

print("[SYSTEM] CCTV 시스템 시작 (q 누르면 종료)")

# --- 프레임 카운터 초기화 ---
frame_counter = 0
ANALYSIS_INTERVAL = 5 # 5프레임마다 분석

# --- 마지막 저장 공간 정리 시간 초기화 ---
last_cleanup_time = time.time()

# --- 메인 루프 ---
while True:
    ret, frame2 = capture.read()
    if not ret:
        print("[ERROR] 카메라에서 프레임을 읽을 수 없습니다. 스트림이 종료되었을 수 있습니다.")
        break

    # 모션 감지를 위한 프레임 전처리
    frame2_gray = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)
    frame2_gray = cv2.GaussianBlur(frame2_gray, (21, 21), 0)

    # 이전 프레임과의 차이 계산
    frame_diff = cv2.absdiff(frame1_gray, frame2_gray)
    thresh = cv2.threshold(frame_diff, 25, 255, cv2.THRESH_BINARY)[1]
    
    # 모션 레벨 계산 (임계값 픽셀의 합)
    motion_level = np.sum(thresh) / 255
    MOTION_THRESHOLD = 2000 # 모션 감지 임계값 (조정 가능)
    motion_detected = motion_level > MOTION_THRESHOLD

    # 현재 시간 문자열 생성
    now = datetime.datetime.now()
    nowDatetime = now.strftime("%Y-%m-%d %H:%M:%S")

    # 타임스탬프 및 상태 표시
    # 검은색 배경 사각형 그리기
    cv2.rectangle(frame2, (10, 15), (320, 35), (0, 0, 0), -1)
    # PIL 이미지로 변환하여 텍스트 오버레이 (한글 폰트 지원)
    frame_pil = Image.fromarray(frame2)
    draw = ImageDraw.Draw(frame_pil)
    draw.text((10, 15), f"CCTV {nowDatetime}", font=font, fill=(255, 255, 255))
    frame2 = np.array(frame_pil) # 다시 OpenCV 이미지로 변환

    # 모션 감지 및 녹화 시작 로직
    if motion_detected and not is_record:
        print(f"[MOTION] 모션 감지됨 (레벨: {int(motion_level)}). 녹화 시작 준비...")
        if start_recording(frame2.shape, fourcc):
            is_record = True
            record_start_time = time.time()
        else:
            print("[ERROR] 녹화 시작 실패. 다시 시도하지 않습니다.")

    # 녹화 중일 때의 처리
    if is_record:
        if video_writer and video_writer.isOpened():
            video_writer.write(frame2) # 현재 프레임을 비디오 파일에 쓰기
            cv2.circle(frame2, (620, 15), 5, (0, 0, 255), -1) # 녹화 중임을 나타내는 빨간 점 표시

            # 프레임 카운터 증가
            frame_counter += 1

            # --- YOLO 모델 분석을 5프레임마다 수행 ---
            if frame_counter % ANALYSIS_INTERVAL == 0:
                results = model(frame2, verbose=False) # verbose=False로 콘솔 출력 줄임
                if is_dangerous(results):
                    is_danger_recorded_in_session = True # 위험 감지 플래그 설정
                    # print("[ANALYZE] 위험 클래스 감지됨!") # 디버깅용

            # 녹화 시간 초과 확인
            if time.time() - record_start_time > RECORD_DURATION:
                print(f"[REC] 녹화 시간 ({RECORD_DURATION}초) 초과. 녹화 종료 중...")
                stop_recording()
                is_record = False
        else:
            print("[ERROR] 비디오 라이터가 유효하지 않습니다. 녹화 중지.")
            is_record = False # 오류 발생 시 녹화 상태 초기화

    # 화면에 프레임 표시
    cv2.imshow("CCTV Output (Press 'q' to quit)", frame2)
    
    # 다음 프레임을 위해 현재 프레임을 이전 프레임으로 설정
    frame1_gray = frame2_gray.copy()

    # --- 저장 공간 정리 주기적으로 확인 ---
    check_and_cleanup_storage()

    # 'q' 키를 누르면 종료
    if cv2.waitKey(1) & 0xFF == ord('q'):
        signal_handler(None, None) # 종료 핸들러 호출

# 메인 루프 종료 후 리소스 해제 (Ctrl+C로 종료되지 않았을 경우)
stop_recording()
if 'capture' in globals() and capture.isOpened():
    capture.release()
cv2.destroyAllWindows()
